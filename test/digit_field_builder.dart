import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:well_formed/numeric.dart';

/// Typedef of the constructor parameters.
typedef DigitFieldCtor = DigitField Function({
  String? blank,
  bool trim,
  TextInputType? keyboardType,
  TextEditingController? controller,
  String? initialValue,
  InputDecoration? decoration,
  TextInputAction? textInputAction,
  TextStyle? style,
  TextDirection? textDirection,
  TextAlign textAlign,
  bool readOnly,
  bool obscureText,
  bool autocorrect,
  String obscuringCharacter,
  int? maxLength,
  ValueChanged<String>? onChanged,
  VoidCallback? onEditingComplete,
  ValueChanged<String>? onFieldSubmitted,
  FormFieldSetter<String>? onSaved,
  FormFieldValidator<String>? validator,
  List<TextInputFormatter>? inputFormatters,
  bool? enabled,
  EdgeInsets scrollPadding,
  bool enableInteractiveSelection,
  AutovalidateMode? autovalidateMode,
  Key? key,
});

/// Builds a [DigitField] instance with all properties.
class DigitFieldBuilder {
  /// Builds a [DigitField] by invoking the default ctor.
  DigitFieldBuilder()
      : _ctor = (({
          String? blank,
          bool trim = false,
          TextInputType? keyboardType,
          TextEditingController? controller,
          String? initialValue,
          InputDecoration? decoration,
          TextInputAction? textInputAction,
          TextStyle? style,
          TextDirection? textDirection,
          TextAlign textAlign = TextAlign.start,
          bool readOnly = false,
          bool obscureText = false,
          bool autocorrect = true,
          String obscuringCharacter = '•',
          int? maxLength,
          ValueChanged<String>? onChanged,
          VoidCallback? onEditingComplete,
          ValueChanged<String>? onFieldSubmitted,
          FormFieldSetter<String>? onSaved,
          FormFieldValidator<String>? validator,
          List<TextInputFormatter>? inputFormatters,
          bool? enabled,
          EdgeInsets scrollPadding = const EdgeInsets.all(20.0),
          bool enableInteractiveSelection = true,
          AutovalidateMode? autovalidateMode,
          Key? key,
        }) {
          return DigitField(
            blank: blank,
            trim: trim,
            keyboardType: keyboardType,
            controller: controller,
            initialValue: initialValue,
            decoration: decoration,
            textInputAction: textInputAction,
            style: style,
            textDirection: textDirection,
            textAlign: textAlign,
            readOnly: readOnly,
            obscureText: obscureText,
            autocorrect: autocorrect,
            obscuringCharacter: obscuringCharacter,
            maxLength: maxLength,
            onChanged: onChanged,
            onEditingComplete: onEditingComplete,
            onFieldSubmitted: onFieldSubmitted,
            onSaved: onSaved,
            validator: validator,
            inputFormatters: inputFormatters,
            enabled: enabled,
            scrollPadding: scrollPadding,
            enableInteractiveSelection: enableInteractiveSelection,
            autovalidateMode: autovalidateMode,
            key: key,
          );
        });

  /// Builds a [DigitField] by invoking the len ctor.
  DigitFieldBuilder.len([int len = 13])
      : _ctor = (({
          String? blank,
          bool trim = false,
          TextInputType? keyboardType,
          TextEditingController? controller,
          String? initialValue,
          InputDecoration? decoration,
          TextInputAction? textInputAction,
          TextStyle? style,
          TextDirection? textDirection,
          TextAlign textAlign = TextAlign.start,
          bool readOnly = false,
          bool obscureText = false,
          bool autocorrect = true,
          String obscuringCharacter = '•',
          int? maxLength,
          ValueChanged<String>? onChanged,
          VoidCallback? onEditingComplete,
          ValueChanged<String>? onFieldSubmitted,
          FormFieldSetter<String>? onSaved,
          FormFieldValidator<String>? validator,
          List<TextInputFormatter>? inputFormatters,
          bool? enabled,
          EdgeInsets scrollPadding = const EdgeInsets.all(20.0),
          bool enableInteractiveSelection = true,
          AutovalidateMode? autovalidateMode,
          Key? key,
        }) {
          return DigitField.len(
            len,
            blank: blank,
            trim: trim,
            keyboardType: keyboardType,
            controller: controller,
            initialValue: initialValue,
            decoration: decoration,
            textInputAction: textInputAction,
            style: style,
            textDirection: textDirection,
            textAlign: textAlign,
            readOnly: readOnly,
            obscureText: obscureText,
            autocorrect: autocorrect,
            obscuringCharacter: obscuringCharacter,
            maxLength: maxLength,
            onChanged: onChanged,
            onEditingComplete: onEditingComplete,
            onFieldSubmitted: onFieldSubmitted,
            onSaved: onSaved,
            validator: validator,
            inputFormatters: inputFormatters,
            enabled: enabled,
            scrollPadding: scrollPadding,
            enableInteractiveSelection: enableInteractiveSelection,
            autovalidateMode: autovalidateMode,
            key: key,
          );
        });

  /// Builds a [DigitField] by invoking the min ctor.
  DigitFieldBuilder.min([int min = 1])
      : _ctor = (({
          String? blank,
          bool trim = false,
          TextInputType? keyboardType,
          TextEditingController? controller,
          String? initialValue,
          InputDecoration? decoration,
          TextInputAction? textInputAction,
          TextStyle? style,
          TextDirection? textDirection,
          TextAlign textAlign = TextAlign.start,
          bool readOnly = false,
          bool obscureText = false,
          bool autocorrect = true,
          String obscuringCharacter = '•',
          int? maxLength,
          ValueChanged<String>? onChanged,
          VoidCallback? onEditingComplete,
          ValueChanged<String>? onFieldSubmitted,
          FormFieldSetter<String>? onSaved,
          FormFieldValidator<String>? validator,
          List<TextInputFormatter>? inputFormatters,
          bool? enabled,
          EdgeInsets scrollPadding = const EdgeInsets.all(20.0),
          bool enableInteractiveSelection = true,
          AutovalidateMode? autovalidateMode,
          Key? key,
        }) {
          return DigitField.min(
            min,
            blank: blank,
            trim: trim,
            keyboardType: keyboardType,
            controller: controller,
            initialValue: initialValue,
            decoration: decoration,
            textInputAction: textInputAction,
            style: style,
            textDirection: textDirection,
            textAlign: textAlign,
            readOnly: readOnly,
            obscureText: obscureText,
            autocorrect: autocorrect,
            obscuringCharacter: obscuringCharacter,
            maxLength: maxLength,
            onChanged: onChanged,
            onEditingComplete: onEditingComplete,
            onFieldSubmitted: onFieldSubmitted,
            onSaved: onSaved,
            validator: validator,
            inputFormatters: inputFormatters,
            enabled: enabled,
            scrollPadding: scrollPadding,
            enableInteractiveSelection: enableInteractiveSelection,
            autovalidateMode: autovalidateMode,
            key: key,
          );
        });

  /// Builds a [DigitField] by invoking the max ctor.
  DigitFieldBuilder.max([int max = 100])
      : _ctor = (({
          String? blank,
          bool trim = false,
          TextInputType? keyboardType,
          TextEditingController? controller,
          String? initialValue,
          InputDecoration? decoration,
          TextInputAction? textInputAction,
          TextStyle? style,
          TextDirection? textDirection,
          TextAlign textAlign = TextAlign.start,
          bool readOnly = false,
          bool obscureText = false,
          bool autocorrect = true,
          String obscuringCharacter = '•',
          int? maxLength,
          ValueChanged<String>? onChanged,
          VoidCallback? onEditingComplete,
          ValueChanged<String>? onFieldSubmitted,
          FormFieldSetter<String>? onSaved,
          FormFieldValidator<String>? validator,
          List<TextInputFormatter>? inputFormatters,
          bool? enabled,
          EdgeInsets scrollPadding = const EdgeInsets.all(20.0),
          bool enableInteractiveSelection = true,
          AutovalidateMode? autovalidateMode,
          Key? key,
        }) {
          return DigitField.max(
            max,
            blank: blank,
            trim: trim,
            keyboardType: keyboardType,
            controller: controller,
            initialValue: initialValue,
            decoration: decoration,
            textInputAction: textInputAction,
            style: style,
            textDirection: textDirection,
            textAlign: textAlign,
            readOnly: readOnly,
            obscureText: obscureText,
            autocorrect: autocorrect,
            obscuringCharacter: obscuringCharacter,
            maxLength: maxLength,
            onChanged: onChanged,
            onEditingComplete: onEditingComplete,
            onFieldSubmitted: onFieldSubmitted,
            onSaved: onSaved,
            validator: validator,
            inputFormatters: inputFormatters,
            enabled: enabled,
            scrollPadding: scrollPadding,
            enableInteractiveSelection: enableInteractiveSelection,
            autovalidateMode: autovalidateMode,
            key: key,
          );
        });

  /// Builds a [DigitField] by invoking the range ctor.
  DigitFieldBuilder.range([int min = 1, int max = 100])
      : _ctor = (({
          String? blank,
          bool trim = false,
          TextInputType? keyboardType,
          TextEditingController? controller,
          String? initialValue,
          InputDecoration? decoration,
          TextInputAction? textInputAction,
          TextStyle? style,
          TextDirection? textDirection,
          TextAlign textAlign = TextAlign.start,
          bool readOnly = false,
          bool obscureText = false,
          bool autocorrect = true,
          String obscuringCharacter = '•',
          int? maxLength,
          ValueChanged<String>? onChanged,
          VoidCallback? onEditingComplete,
          ValueChanged<String>? onFieldSubmitted,
          FormFieldSetter<String>? onSaved,
          FormFieldValidator<String>? validator,
          List<TextInputFormatter>? inputFormatters,
          bool? enabled,
          EdgeInsets scrollPadding = const EdgeInsets.all(20.0),
          bool enableInteractiveSelection = true,
          AutovalidateMode? autovalidateMode,
          Key? key,
        }) {
          return DigitField.range(
            min,
            max,
            blank: blank,
            trim: trim,
            keyboardType: keyboardType,
            controller: controller,
            initialValue: initialValue,
            decoration: decoration,
            textInputAction: textInputAction,
            style: style,
            textDirection: textDirection,
            textAlign: textAlign,
            readOnly: readOnly,
            obscureText: obscureText,
            autocorrect: autocorrect,
            obscuringCharacter: obscuringCharacter,
            maxLength: maxLength,
            onChanged: onChanged,
            onEditingComplete: onEditingComplete,
            onFieldSubmitted: onFieldSubmitted,
            onSaved: onSaved,
            validator: validator,
            inputFormatters: inputFormatters,
            enabled: enabled,
            scrollPadding: scrollPadding,
            enableInteractiveSelection: enableInteractiveSelection,
            autovalidateMode: autovalidateMode,
            key: key,
          );
        });
  final DigitFieldCtor _ctor;

  /// Returns a [DigitField] instance.
  DigitField call({
    String? blank,
    bool trim = false,
    TextInputType? keyboardType,
    TextEditingController? controller,
    String? initialValue,
    InputDecoration? decoration,
    TextInputAction? textInputAction,
    TextStyle? style,
    TextDirection? textDirection,
    TextAlign textAlign = TextAlign.start,
    bool readOnly = false,
    bool obscureText = false,
    bool autocorrect = true,
    String obscuringCharacter = '•',
    int? maxLength,
    ValueChanged<String>? onChanged,
    VoidCallback? onEditingComplete,
    ValueChanged<String>? onFieldSubmitted,
    FormFieldSetter<String>? onSaved,
    FormFieldValidator<String>? validator,
    List<TextInputFormatter>? inputFormatters,
    bool? enabled,
    EdgeInsets scrollPadding = const EdgeInsets.all(20.0),
    bool enableInteractiveSelection = true,
    AutovalidateMode? autovalidateMode,
    Key? key,
  }) {
    return _ctor(
      blank: blank,
      trim: trim,
      keyboardType: keyboardType,
      controller: controller,
      initialValue: initialValue,
      decoration: decoration,
      textInputAction: textInputAction,
      style: style,
      textDirection: textDirection,
      textAlign: textAlign,
      readOnly: readOnly,
      obscureText: obscureText,
      autocorrect: autocorrect,
      obscuringCharacter: obscuringCharacter,
      maxLength: maxLength,
      onChanged: onChanged,
      onEditingComplete: onEditingComplete,
      onFieldSubmitted: onFieldSubmitted,
      onSaved: onSaved,
      validator: validator,
      inputFormatters: inputFormatters,
      enabled: enabled,
      scrollPadding: scrollPadding,
      enableInteractiveSelection: enableInteractiveSelection,
      autovalidateMode: autovalidateMode,
      key: key,
    );
  }
}
